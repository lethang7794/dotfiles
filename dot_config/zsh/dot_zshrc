# DEBUG_PERF=true
[[ $DEBUG_PERF == true ]] && zmodload zsh/zprof

# Inherit PATH from bash
export PATH=$HOME/bin:/usr/local/bin:$PATH

## Brew
HOMEBREW_BIN=/home/linuxbrew/.linuxbrew/bin/brew
if [ -f "$HOMEBREW_BIN" ]; then
  eval "$($HOMEBREW_BIN shellenv)"

  # Brew autoupdate
  export HOMEBREW_AUTO_UPDATE_SECS="86400"
fi

## Antidote - zsh packages
ANTIDOTE_BIN="$HOMEBREW_PREFIX/opt/antidote/share/antidote/antidote.zsh"
if [ -f "$ANTIDOTE_BIN" ]; then
  source $ANTIDOTE_BIN
fi
zstyle ':antidote:bundle' use-friendly-names 'yes'
zsh_plugins=${ZDOTDIR}/.zsh_plugins
if [[ ! ${zsh_plugins}.zsh -nt ${zsh_plugins}.txt ]]; then
  (
    [ "$(command -v antidote)" ] && antidote bundle <${zsh_plugins}.txt >${zsh_plugins}.zsh
  )
fi
if [ -f ${zsh_plugins}.zsh ]; then
  source ${zsh_plugins}.zsh
fi

## zsh
# History
[ -d "$XDG_STATE_HOME"/zsh ] || mkdir -p "$XDG_STATE_HOME"/zsh
HISTFILE="$XDG_STATE_HOME"/zsh/history

# Completion
[ -d "$XDG_CACHE_HOME"/zsh ] || mkdir -p "$XDG_CACHE_HOME"/zsh

## oh-my-zsh's already done this
# autoload -Uz bashcompinit && bashcompinit 
# autoload -Uz compinit

# [ -d "$XDG_CACHE_HOME"/zsh/zcompcache ] || mkdir -p "$XDG_CACHE_HOME"/zsh/zcompcache
# zstyle ':completion:*' cache-path "$XDG_CACHE_HOME"/zsh/zcompcache
# compinit -d "$XDG_CACHE_HOME"/zsh/zcompdump-$HOST-$ZSH_VERSION

# TODO: migrate to this instead of using ZSH_CUSTOM
# Custon completions
# [ -d "$XDG_DATA_HOME"/zsh/completions ] || mkdir -p "$XDG_DATA_HOME"/zsh/completions
# FPATH="${XDG_DATA_HOME}/zsh/completions:${FPATH}"

# Path to your oh-my-zsh installation.
# export ZSH="$HOME/.oh-my-zsh"
export ZSH=$(antidote path ohmyzsh/ohmyzsh)
export ZSH_CUSTOM="$XDG_CONFIG_HOME/zsh/zsh_custom"

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

zstyle ':omz:update' mode disabled

if [[ "$(command -v git)" && -d $ZSH ]]; then
  # ZSH_COMPDUMP="$ZSH_CACHE_DIR/.zcompdump-$HOST" # Oh-my-zsh will use ZDOTDIR
  # mkdir -p $ZSH_CACHE_DIR

  ZSH_DISABLE_COMPFIX="true"

  plugins=(
    # golang # doesn't need this
  )

  FPATH="${FPATH}:$(brew --prefix)/share/zsh/site-functions" # CURRENT THIS DOESN'T WORK
  source $ZSH/oh-my-zsh.sh
fi

# TODO: load brew conpletions after:
# - /usr/share/zsh/site-functions                                                                                                                                         ││
# - /usr/share/zsh/5.9/functions
#
# Brew completions

## Completions from command
# _evalcache kubeadm completion zsh

## argc-completions: load after oh-my-zsh
# Load argc-completions first, so they can be override by others                    # ?
export ARGC_COMPLETIONS_ROOT="/home/lqt/go/src/github.com/sigoden/argc-completions" # 
export ARGC_COMPLETIONS_PATH="$ARGC_COMPLETIONS_ROOT/completions"                   #
# export PATH="$ARGC_COMPLETIONS_ROOT/bin:$PATH"                                    # Use the one from brew
# To add a subset of completions only, change next line e.g. argc_scripts=( cargo git )
argc_scripts=($(ls -p -1 "$ARGC_COMPLETIONS_ROOT/completions" | sed -n 's/\.sh$//p')) # All argc-completions 
# argc_scripts=( 
#   broot
#   fzf
#   kubeadm # Better then the builtin
#   minikube
#   ctrld
#   ttab
#   wmctrl
# )
_evalcache argc --argc-completions zsh $argc_scripts

# TODO: migrate away from oh-my-zsh to have full control
# Load completions the second time, which will make zsh startup a lot slower
# compinit -d $ZSH_COMPDUMP 

# Plugins
export ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# User configuration

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example Aliases
# #d alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

## TODO: Move alias to a different file
## Aliases
alias rm="echo Use \'trash\' or \'trash-put\' instead of \'rm\'."
alias rmdir="echo Use \'trash\' or \'trash-put\' instead of \'rmdir\'."
alias mv="mv -iv"

alias rm-yes-i-know="/usr/bin/rm -iv"
alias rmdir-yes-i-know="/usr/bin/rmdir -iv"

alias p="pnpm"
alias v="nvim"
alias vi="nvim"
alias vim="nvim"
alias mk="minikube"
alias yless="jless --yaml" # How to use? :help, F1
alias cz="chezmoi"

alias c="code"
alias ci="code-insiders"

# Globalias
GLOBALIAS_FILTER_VALUES=(ls which z grep dk open rm rmdir rm-yes-i-know rmdir-yes-i-know mv)

## Brew
if [ -f "$HOMEBREW_BIN" ]; then
  HB_CNF_HANDLER="$(brew --repository)/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
  if [ -f "$HB_CNF_HANDLER" ]; then
    source "$HB_CNF_HANDLER"
  fi
fi

## Bind Alt+R to reload shell config 
function source-shell {
  echo "Source shell configuration"
  # exec -l zsh
  omz reload  
}
zle -N source-shell        # Define source-shell as a new widget
bindkey "^[r" source-shell # Bind Alt+R to source-shell
# TODO: The shell will be closed, not reload the current session 

## Zsh plugin

# MichaelAquilina/zsh-you-should-use
# export YSU_MESSAGE_FORMAT="$(tput setaf 1)Hey! I found this %alias_type for %command: %alias$(tput sgr0)"

# Atuin
if [ "$(command -v atuin)" ]; then
  export ATUIN_NOBIND="true"
  _evalcache atuin init zsh
  # eval "$(atuin init zsh --disable-up-arrow)"
  # eval "$(atuin init zsh --disable-up-arrow --disable-ctrl-r)"

  # bindkey '^r' atuin-search
  bindkey '^r' atuin-search

  # bind to the up key, which depends on terminal mode
  bindkey '^[[A' atuin-up-search
  bindkey '^[OA' atuin-up-search
fi

# Thefuck
_evalcache thefuck --alias f
# zle -N f        # Define f as a new widget
# bindkey "^[f" f # Bind Alt+f to f



## Broot
# broot launch script ~/.local/share/broot/launcher/bash/1,
# - Modified: show git-info, tree, hidden files
function br {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --show-git-info --hidden --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        command rm -f "$cmd_file"
        eval "$cmd"
    else
        code=$?
        command rm -f "$cmd_file"
        return "$code"
    fi
}
# compdef br=broot # doesn't work
function cdd {
  br --only-folders
}
function treee {
  br -c :pt "$@"
}

## AWS https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-completion.html#cli-command-completion-linux
# complete -C '/usr/bin/aws_completer' aws

## zoxide: smarter cd
# https://github.com/ajeetdsouza/zoxide/blob/main/src/cmd/query.rs
export _ZO_FZF_OPTS="
  --exact
  --no-sort
  --bind=ctrl-z:ignore,btab:up,tab:down
  --cycle
  --keep-right
  --border=sharp
  --color=label:italic
  --border-label='╢ Alt+Z: Search frequently directories ╟'
  --height=90%
  --info=inline-right
  --highlight-line
  --color='pointer:white'
  --layout=reverse
  --tabstop=1
  --exit-0
  --preview='tree -C --dirsfirst -L 1 {2..}'
  --preview-window=right
  --bind='alt-z:toggle-preview-wrap'
  --bind='ctrl-y:execute-silent(echo -n {2..} | xclip -selection clipboard)'
  --bind='ctrl-s:toggle-sort'
  --bind 'ctrl-/:toggle-preview'
  --bind 'alt-/:change-preview-window:right|down'
  --bind 'f11:change-preview-window:right|down'
"
_evalcache zoxide init zsh
zle -N zi        # Define zi as a new widget
bindkey "^[z" zi # Bind Alt+z to zi

# Walk https://github.com/antonmedv/walk
export WALK_REMOVE_CMD=trash
function lk {
  cd "$(walk --icons --fuzzy --preview "$@")"
}

# List the shell functions with highlight, fuzzy search
function funcs {
  declare -f | perl -0777 -pe 's/^}\n/}\0/gm' |
    bat --plain --language bash --color always |
    fzf --read0 --ansi --reverse --multi --highlight-line --query "$1" |
    bat --plain --language bash --color always
}

#==========================================================================================================================
#                                                     fzf
#==========================================================================================================================
# fzf setup
if [ -d "$HOMEBREW_PREFIX/opt/fzf" ]; then
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
fi

export FZF_DEFAULT_COMMAND="fd --color=always --hidden"
export FZF_DEFAULT_OPTS="
  --ansi
  --border=sharp
  --highlight-line
  --tabstop=4
  --color='pointer:white,marker:#87ff00'
  --height=90%
  --info=inline-right
  --preview-window=right,57%,~1,+{0}+1/2
  --bind='alt-z:toggle-preview-wrap'
  --bind='ctrl-y:execute-silent(echo -n {} | xclip -selection clipboard)'
  --bind='ctrl-s:toggle-sort'
  --bind 'ctrl-/:toggle-preview'
  --bind 'alt-/:change-preview-window:right|down'
  --bind 'f11:change-preview-window:down,99%,~1,+{0}+1/2|down,~1,+{0}+1/2|hidden|'
  --marker='✓'
"
  # --pointer='󰋇 '

# <Ctrl-/> to toggle small preview window to see the full command
# <Ctrl-Y> to copy the command into clipboard using xclip
export FZF_CTRL_R_OPTS="
  --color label:italic
  --border-label='╢ Ctrl+R: Search history ╟'
  --preview 'echo {2..} | bat --color=always -pl sh' 
  --preview-window up:5:hidden:wrap
  --color header:italic
  --header '<Ctrl-Y> Copy\\t<Ctrl-/> Preview\\t<Ctrl-S> Sort'
  --bind='ctrl-s:toggle-sort'
  --bind 'ctrl-/:toggle-preview'
  --bind 'ctrl-y:execute-silent(echo -n {2..} | xclip -selection clipboard)+abort'
"

export FZF_ALT_T_COMMAND="fd --color=always --hidden --type=file '' '$HOME'"
typeTransformerAltT='
  if [[ ! $FZF_PROMPT =~ Files ]]; then
    echo "change-prompt( Files> )+reload(fd --color=always --hidden --type=file {q} '$HOME')"
  else
    echo "change-prompt( Directories> )+reload(fd --color=always --hidden --type=directory {q} '$HOME')"
  fi
'
export FZF_CTRL_T_COMMAND="fd --color=always --hidden --type=file"
typeTransformerCtrlT='
  if [[ ! $FZF_PROMPT =~ Files ]]; then
    echo "change-prompt( Files> )+reload(fd --color=always --hidden --type=file)"
  else
    echo "change-prompt( Directories> )+reload(fd --color=always --hidden --type=directory)"
  fi
'
export FZF_CTRL_T_OPTS="
  --border-label='╢ Ctr+T: Search files by path ╟'
  --prompt ' Files> '
  --color header:italic
  --color label:italic
  --header '<Ctrl-T> Files/Directorie\\t<Ctrl-/> Preview\\t<Ctrl-S> Sort\\t\\n<Ctrl+E> Open with nvim\\t\\t<Alt-E> VS Code\\t\\t<Alt+Enter> Default App'
  --bind 'alt-/:change-preview-window:right,~1,+{0}+1/2|down,~1,+{0}+1/2'
  --bind 'ctrl-/:toggle-preview'
  --bind='ctrl-s:toggle-sort'
  --bind 'ctrl-t:transform:$typeTransformerCtrlT'
  --bind 'alt-t:transform:$typeTransformerAltT'
  --preview 'sleep 0; lessfilter {}'
  --bind 'ctrl-e:execute(nvim {+})'
  --bind 'alt-e:execute(code --disable-extensions -g {+}; sleep 1)'
  --bind 'alt-enter:execute(for file in {+}; do xdg-open \$file; done)'
  --bind 'ctrl-alt-a:execute-silent(chezmoi add {+} && notify-send -t 1 \"Chezmoi\" \"{+} added.\" --app-name=\"Chezmoi\")'
  --bind 'ctrl-alt-e:execute(chezmoi edit --watch {+})'
  --bind 'ctrl-alt-o:execute(EDITOR=\"code --disable-extensions\" chezmoi edit --watch {+}; sleep 1)'
"

function fzf-path-preview () {
  fzf "$@" --multi --layout=reverse --preview 'lessfilter {}'
}

BFS_EXCLUDE="-name .git -or -name .cache -or -name node_modules"
export FZF_ALT_C_COMMAND="bfs -color -type d -unique -exclude \( $BFS_EXCLUDE \) 2>/dev/null | sed 's|./||'"
export FZF_ALT_C_OPTS="
  --color header:italic
  --color label:italic
  --header '<Ctrl-/> Toggle Preview    <Ctrl-S> Sort'
  --preview 'tree -C --dirsfirst -L 1 {} | head -200'
  --bind 'ctrl-/:toggle-preview'
  --bind 'alt-/:change-preview-window:right|down'
"

# rg-fzf: Switch files by content using Ripgrep then filter the results with fzf (Alt-F)
function rg-fzf {
  /usr/bin/rm -f /tmp/rg-fzf-{r,f}

  RG_PREFIX="rg --line-number --no-heading --color=always --smart-case --colors=path:style:underline --colors=line:style:underline --colors=line:fg:white --colors=match:style:nobold --colors=match:fg:197,209,222 --colors=match:bg:45,88,156"
  INITIAL_QUERY="${*:-}"

  : | fzf --ansi --disabled --query "$INITIAL_QUERY" \
    --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
    --bind 'ctrl-f:transform:[[ ! $FZF_PROMPT =~ ripgrep ]] &&
              echo "rebind(change)+change-prompt(1. 󱩾 ripgrep> )+disable-search+transform-query:echo \{q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r" ||
              echo "unbind(change)+change-prompt(2. 󰈲 fzf> )+enable-search+transform-query:echo \{q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f"' \
    --color "header:italic,hl:-1:underline,hl+:-1:underline:reverse" \
    --color "pointer:white" \
    --color "label:italic" \
    --border-label "╢ rg-fzf: Search files by content ╟" \
    --prompt '1. 󱩾 ripgrep> ' \
    --delimiter : \
    --layout=reverse \
    --header '<Ctrl-F> Switch to fzf/ripgrep' \
    --preview 'bat --color=always --highlight-line {2} -- {1}' \
    --preview-window 'down,50%,+{2}+3/3,~3' \
    --bind 'enter:execute(nvim {1} +{2})' \
    --bind 'alt-enter:execute(code --disable-extensions -g {1}:{2}; sleep 1)'
}
zle -N rg-fzf       # Define rg-fzf as a new widget
bindkey "^f" rg-fzf # Bind Ctrl+F to rg-fzf

rga-fzf() {
	RG_PREFIX="rga --files-with-matches --color=always"
	local file
	file="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
				--phony -q "$1" \
        --layout=reverse \
        --color "label:italic" \
        --border-label "╢ rga-fzf: Search all files (PDF, epub...) by content ╟" \
        --prompt '1. 󱩾 rga> ' \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="right" \
        --bind='alt-z:toggle-preview-wrap' \
        --bind='ctrl-y:execute-silent(echo -n {} | xclip -selection clipboard)' \
        --bind='ctrl-s:toggle-sort'
	)" &&
	echo "Opening $file" &&
	open "$file"
}
zle -N rga-fzf        # Define rga-fzf as a new widget
bindkey "^[f" rga-fzf # Bind Alt+F to rga-fzf

function fzf-man-cleanup {
  local manlist_file="/tmp/fzf-man-manlist"
  local cheatlist_file="/tmp/fzf-man-cheatlist"
  local tldrlist_file="/tmp/fzf-man-tldrlist"
  export compgenlist_file="/tmp/fzf-man-compgenlist"

  /usr/bin/rm $manlist_file $cheatlist_file $tldrlist_file $compgenlist_file
}

function fzf-man {
  local query=$1

  export local tldr_cmd="echo $ tldr {1}; tldr --color=always {1} | tail -n +3"
  export local cheat_cmd="echo $ cheat {1}; echo; cheat --colorize {1}"
  export local man_cmd="echo $ man {1}; man {1} 2>/dev/null | bat --language=man --plain --color=always"
  export local help_cmd='
    if [ "\$(command -v {1})" ]; then
      if timeout 0.3s bash -c "{1} -h" 1>/dev/null 2>&1; then
        h=$({1} -h 2>/dev/null | bat --color=always -pl help)
      fi
      if timeout 0.3s bash -c "{1} --h" 1>/dev/null 2>&1; then
        help=$({1} --help 2>/dev/null | bat --color=always -pl help)
      fi
      if [[ -n "$h" ]] ; then
        echo \$ {1} -h
        echo $h
      fi
      if [[ -n "$help" ]] && [[ "$h" != "$help" ]] ; then
        echo
        echo \$ {1} --help
        echo $help
      fi
      if [[ -z "$h" ]] && [[ -z "$help" ]] ; then
        echo \$ {1}: -h or --help are not available
      fi
    fi
  '

  export local manlist_file="/tmp/fzf-man-manlist"
  export local cheatlist_file="/tmp/fzf-man-cheatlist"
  export local tldrlist_file="/tmp/fzf-man-tldrlist"
  export local compgenlist_file="/tmp/fzf-man-compgenlist"

  local N=22
  local CACHE_TIME="/tmp/fzf-man-cache-time"
  touch -d "$N hours ago" $CACHE_TIME

  local file=$manlist_file
  if [[ ! -e $file || $file -ot $CACHE_TIME ]]; then
    local manlist=$(man -k . | sort | awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1')
    echo $manlist >$file
  else
    local manlist=$(cat $file)
  fi

  local file=$cheatlist_file
  if [[ ! -e $file || $file -ot $CACHE_TIME ]]; then
    local cheatlist=$(cheat -l | awk '{printf "\033[1;36m%s\033[0m %s\n", $1, $3}' | tail --lines +2 | sed 's/community\,*//g' | column -t)
    echo $cheatlist >$file
  else
    local cheatlist=$(cat $file)
  fi

  local file=$tldrlist_file
  if [[ ! -e $file || $file -ot $CACHE_TIME ]]; then
    tldr --update >/dev/null 2>&1
    local tldrlist=$(tldr --list)
    echo $tldrlist >$file
  else 
    local tldrlist=$(cat $file)
  fi

  local file=$compgenlist_file
  if [[ ! -e $file || $file -ot $CACHE_TIME ]]; then
    local compgenlist=$(compgen -c | sort -u | grep -Ev "^_")
    echo $compgenlist >$file
  else 
    local compgenlist=$(cat $file)
  fi
  
  local executer='
    if [[ $FZF_PROMPT =~ TLDR ]]; then
      tldr {1}
    elif [[ $FZF_PROMPT =~ Cheat ]]; then
      cheat {1}
    elif [[ $FZF_PROMPT =~ Man ]]; then
      man {1}
    else
      :
    fi
  '

  # TLDR -> Cheat --> help --> man 
  local transformer='
    if [[ $FZF_PROMPT =~ TLDR ]]; then
      echo "change-prompt(󰬊 Cheat > )+reload(cat $cheatlist_file)+change-preview($cheat_cmd)"
    elif [[ $FZF_PROMPT =~ Cheat ]]; then
      echo "change-prompt(󰬏 Help > )+reload(cat $compgenlist_file)+change-preview($help_cmd)"
    elif [[ $FZF_PROMPT =~ Help ]]; then
      echo "change-prompt(󰬔 Man > )+reload(cat $manlist_file)+change-preview($man_cmd)"
    else
      echo "change-prompt(󰬛 TLDR > )+reload(cat $tldrlist_file)+change-preview($tldr_cmd)"
    fi
  '

  echo $tldrlist |
    fzf \
      -q "$query" \
      --ansi \
      --border none \
      --tiebreak=begin \
      --prompt='󰬛 TLDR > ' \
      --bind "alt-1:change-prompt(󰬛 TLDR > )+reload(cat $tldrlist_file)+change-preview($tldr_cmd)" \
      --bind "alt-2:change-prompt(󰬊 Cheat > )+reload(cat $cheatlist_file)+change-preview($cheat_cmd)" \
      --bind "alt-3:change-prompt(󰬏 Help > )+reload(cat $compgenlist_file)+change-preview($help_cmd)" \
      --bind "alt-4:change-prompt(󰬔 Man > )+reload(cat $manlist_file)+change-preview($man_cmd)" \
      --bind "alt-h:transform:$transformer" \
      --bind "enter:become($executer)" \
      --preview "$tldr_cmd" \
      --preview-window '70%,noborder,~2,+{1}+2/3' \
      --color header:italic \
      --header $'<Ctrl-/> Toggle Preview    <Alt-/>, <F11> Change Preview mode    <Ctrl+S> Toggle Sort\n<Alt-H> Next mode    <Alt-1> tldr    <Alt-2> Cheat    <Alt-3> Help    <Alt-4> Man' \
      --bind 'alt-/:change-preview-window:down,99%,~2,+{1}+2/3|down,~2,+{1}+2/3|hidden|' \
      --bind 'f11:change-preview-window:down,99%,~2,+{1}+2/3|down,~2,+{1}+2/3|hidden|' \
      --bind 'ctrl-/:toggle-preview' \
      --bind='ctrl-s:toggle-sort'

  zle reset-prompt
}

function fzf-man-widget {
  fzf-man $LBUFFER
}

# `Alt-H` keybinding to launch the widget (this widget works only on zsh, don't know how to do it on bash and fish (additionaly pressing`ctrl-backspace` will trigger the widget to be executed too because both share the same keycode)
zle -N fzf-man-widget
bindkey '^[h' fzf-man-widget

function fzf-chezmoi {
  local default_preview="chezmoi diff --reverse {}"
  local chezmoi_status_cmd="chezmoi status --path-style=absolute"

  # Use ANSI C quoting, $'..' to escape single quote with '\'' for awk
  local transformer=$'
    if [[ $FZF_PROMPT =~ Changed ]]; then
      echo "change-prompt(All Managed Files > )+reload(chezmoi managed --path-style=absolute)"
    else
      echo "change-prompt(Changed Files > )+reload(chezmoi status --path-style=absolute | awk '\''{print \$2}'\'')"
    fi
  '

  local forgetTarget='
    function backup {
      if [ -f {} ]; then
        mv {} {}.bak
      fi
    }
    chezmoi forget {} && backup
  '
  

  eval $chezmoi_status_cmd | awk '{print $2}' | 
    fzf --preview $default_preview \
      --cycle \
      --prompt 'Changed Files > ' \
      --preview-window 'right' \
      --bind 'alt-a:execute(chezmoi add {})+change-preview(echo "{+} is added to source dir. \n\nReload (Ctrl-R) to see other diff.")' \
      --bind 'alt-d:execute(echo "Merging {}"; chezmoi merge {})+change-preview(echo "Run chezmoi add {} to add any diff to source dir\n"; chezmoi diff {})' \
      --bind 'alt-r:execute(chezmoi apply {})+change-preview(echo "{+} is applied from source dir. \n\nReload (Ctrl-R) to see other diff.")' \
      --bind "alt-backspace:execute($forgetTarget)+change-preview(echo '{+} is removed from source dir. \n\nReload (Ctrl-R) to see other diff.')" \
      --bind "alt-m:transform:$transformer" \
      --bind "alt-l:change-preview(lessfilter {})" \
      --bind "alt-k:change-preview($default_preview)" \
      --bind "ctrl-r:change-prompt(Changed Files > )+reload(eval $chezmoi_status_cmd | awk '{print \$2}')+change-preview($default_preview)" \
      --bind "alt-e:execute|line=\`chezmoi diff {+} | grep -oP '(?<=:)\d+(?= @)' | head -n 1\`; code --disable-extensions -g {+}:\$line; sleep 1|" \
      --bind 'alt-g:execute(smerge $(chezmoi source-path))' \
      --bind "ctrl-e:execute|line=\`chezmoi diff {+} | grep -oP '(?<=:)\d+(?= @)' | head -n 1\`; $EDITOR {+} +\$line|" \
      --bind 'alt-enter:execute(chezmoi managed --path-style absolute --include nodirs | grep -vE " " | xargs code --new-window)' \
      --bind 'ctrl-g:execute(lazygit -p $(chezmoi source-path))' \
      --bind ctrl-z:ignore \
      --color header:italic \
      --header $'<Alt-M> Toggle all files      <Ctrl+E> Edit dotfile\n<Alt-A> chezmoi add           <Alt-D>  chezmoi merge    <Alt-R>  chezmoi apply        <Alt-Backspace> chezmoi forget \n       (dotfiles -> source)                                     (dotfiles <- source)\n                              <Ctrl-R> Reload           <Ctrl+G> Open lazygit' \
      --layout reverse \
      --color "label:italic" \
      --border-label "╢ fzf-chezmoi: Sync dotfiles and chezmoi's source ╟"
}

function fzf-chezmoi-widget {
  LBUFFER="${LBUFFER}$(fzf-chezmoi)"
  local ret=$?
  zle reset-prompt
  return $ret
}
zle -N fzf-chezmoi-widget
bindkey '^[m' fzf-chezmoi-widget

## fzf-tab
bindkey '^Xh' _complete_help
zle -N enable-fzf-tab
bindkey '^Xx' enable-fzf-tab

zstyle ":fzf-tab:*" fzf-flags \
  --multi \
  --bind 'alt-a:select-all' \
  --bind 'alt-t:toggle-all' \
  --height="90%" \
  --header="<Ctrl-Y> Copy to clipboard    <Ctrl-/> Toggle preview    <Ctrl-S/> Sort" \
  --color="header:italic" \
  --bind="ctrl-s:toggle-sort" \
  --bind 'alt-/:change-preview-window:right|down' \
  --bind 'ctrl-/:toggle-preview' 

zstyle ':fzf-tab:*' continuous-trigger '/'

zstyle ':fzf-tab:complete:*' fzf-bindings \
  'ctrl-/:toggle-preview' \
  'ctrl-y:execute-silent(echo -n {2..} | xclip -selection clipboard)'

# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'

# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no

# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'tree -C --dirsfirst -L 1 $realpath | head -200'

# zstyle ':fzf-tab:*' single-group color header

# switch group using `<` and `>` (instead of F1, F2)
zstyle ':fzf-tab:*' switch-group '<' '>'

# Turn off sort for all completions
zstyle ':completion:*' sort false
# Show git sub-commands, git objects in original order
# zstyle ':completion:*:git:*' sort false   # Show the git subcommands in group
# zstyle ':completion:*:git-*:*' sort false # Show the git objects in created-time order
# zstyle ':completion:*:docker-*:*' sort false

unalias run-help  # Remove the default of run-help being aliased to man
autoload run-help # Use zsh's run-help, which will display information for zsh builtins.

# bat: color man. help
if [ "$(command -v bat)" ]; then
  alias bathelp="bat -pl help"
  function man() {
    /usr/bin/man "$@" | bat -pl help
  }

  # alias -g -- -h='-h 2>&1 | bat -pl help'
  # alias -g -- --help='--help 2>&1 | bat -pl help'

  # pre_validation() {
  #   local command="$1"

  #   # Check if the first argument is "help"
  #   if [[ "$command" == *'help'* ]]; then
  #     # Pipe the output of the command to cat
  #     eval $command | bat -pl help
  #     echo "🚨🚨🚨 Press Ctrl+C to exit 🚨🚨🚨"
  #     read -sk key
  #   fi
  # }

  # # Enable the preexec hook
  # autoload -Uz add-zsh-hook
  # add-zsh-hook preexec pre_validation
fi

# fx
# source <(fx --comp zsh) # Need to disable argc-complete for fx; Not so smooth when first release (v33)

# atac
export ATAC_MAIN_DIR=~/.config/atac

## lazygit
# alias lg="lazygit"
function lg()    {
  lazygit "$@" 

  if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
    cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
    rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
  fi
}

## rip2: a safer rm # rip2 is not compatible with XDG
# function rip {
#   local args=$@
#   eval "$HOME/.cargo/bin/rip --graveyard $RIP_GRAVEYARD -i $@"
# }


function upd() {
  echo "\n🆕 Update dnf packages"
  sudo dnf upgrade -y --refresh
  # sudo dnf upgrade -y

  echo "\n🆕 Update zsh plugins"
  antidote update

  echo "\n🆕 Update flatpak packages"
  flatpak update -y

  echo "\n🆕 Update Homebrew packages"
  brew update && brew upgrade

}

## Kubernetes
if [ "$(command -v kubecolor)" ]; then
  alias kubectl="kubecolor"
  compdef kubecolor=kubectl
fi
alias "kube-tree"="kube-lineage"
mk_running=$(minikube status | grep Running | wc -l)
(( mk_running > 0 )) && export MINIKUBE="Running" 

# Volta
# export VOLTA_HOME="$HOME/.volta"
# export PATH="$VOLTA_HOME/bin:$PATH"

# NVMD
# export NVMD_DIR="$HOME/.nvmd"
# export PATH="$NVMD_DIR/bin:$PATH"

# pnpm
# export PNPM_HOME="/home/lqt/.local/share/pnpm"
# case ":$PATH:" in
# *":$PNPM_HOME:"*) ;;
# *) export PATH="$PNPM_HOME:$PATH" ;;
# esac
# pnpm end

# awsume
alias awsume=". awsume"

# Go cover https://dave.cheney.net/2013/11/14/more-simple-test-coverage-in-go-1-2
go-cover() {
  t=$(mktemp)
  go test $COVERFLAGS -coverprofile=$t $@ && go tool cover -func=$t && unlink $t
}
go-cover-web() {
  t=$(mktemp)
  go test $COVERFLAGS -coverprofile=$t $@ && go tool cover -html=$t && unlink $t
}

# JetBrains
export PATH="$PATH:$HOME/.local/share/JetBrains/Toolbox/scripts"

# VS Code
# VSCODE_PROFILE=Fedora
# function code {
#   /usr/bin/code "$@" --profile $VSCODE_PROFILE
# }

# rbenv
if [ "$(command -v rbenv)" ]; then
  _evalcache rbenv init - zsh
fi

# Mojo
export MODULAR_HOME="/home/lqt/.modular"
export PATH="/home/lqt/.modular/pkg/packages.modular.com_mojo/bin:$PATH"

# tmux
# if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#   exec tmux
# fi

alias tmux-cleanup-sessions="tmux list-sessions | grep -v attached | awk 'BEGIN{FS=\":\"}{print $1}' | xargs -n 1 tmux kill-session -t 2> /dev/null || (echo 'Cleanup unattached sessions!' && tmux ls)"
alias tmux-cleanup-windows="tmux list-windows | grep -v attached | awk 'BEGIN{FS=\":\"}{print $1}' | xargs -n 1 tmux kill-window -t 2> /dev/null || (echo 'Cleanup unattached windows!' && tmux ls)"

# alias open=xdg-open # Linux
function open() {
  handlr open "$@"
}

export WHERE=.zshrc

## Functions
function touchfile() {
  local file="$1"
  mkdir -p -- "$(dirname -- "$file")" &&
    touch -- "$file"
}

REPOS="$HOME/go/src/github.com/lethang7794"
GITHUB="$HOME/go/src/github.com"
alias repos="cd $REPOS"
# alias gh="cd $GITHUB"
alias github="cd $GITHUB"

function ghclone() {
  local repo="$1"

  if (($# == 0)); then
    echo "Usage: ghclone ORG/REPO"
    return 1
  fi

  shift 1
  local rest="$@"

  if [[ -z "${repo}" ]]; then
    echo "Usage: ghclone ORG/REPO"
  fi

  local clone_url="git@github.com:$repo"
  local dest="$GITHUB/$repo"

  # Check if destination directory already exists
  if [ -d "$dest" ] && [ -d "$dest/.git" ]; then
    echo "You've already cloned this repo at: $dest"
    echo "Happy hacking, again! 🎮 ૮ ˶ᵔ ᵕ ᵔ˶ ა"
    cd "$dest"
    return 1
  fi

  # Clone the repository
  echo "Cloning 󰊤  /$repo"
  git clone $rest "$clone_url" "$dest" && echo "Happy hacking! 🚀 (づ｡◕‿‿◕｡)づ" && cd "$dest"
}
# compdef ghclone="git" # How to use completions of git clone?

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

# Created by `pipx` on 2024-04-01 17:04:47
export PATH="$PATH:/home/lqt/.local/bin"

## yazi: Blazing fast terminal file manager
function yy() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    cd -- "$cwd"
  fi
  /usr/bin/rm -f -- "$tmp"
}

# Temp workaround to disable punycode deprecation logging to stderr
# https://github.com/bitwarden/clients/issues/6689
alias bw='NODE_OPTIONS="--no-deprecation" bw'

## Copy - paste
# Copy from https://stackoverflow.com/a/62517779 with some modifications
if grep -q -i microsoft /proc/version; then
  # on WSL: version contains the string "microsoft"
  alias copy="clip.exe"
  alias paste="powershell.exe Get-Clipboard"
elif [[ "$(uname -a)" == *"cygwin"* ]]; then
  # on CYGWIN: uname contains the string "cygwin"
  alias copy="/dev/clipboard"
  alias paste="cat /dev/clipboard"
elif [[ ! -r /proc/version ]]; then
  # on MAC: version is not readable at all
  alias copy="pbcopy"
  alias paste="pbpaste"
else
  # on "normal" linux
  alias copy="xclip -sel clip"
  alias paste="xclip -sel clip -o"
fi

# asdf - Extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more
# . "$HOMEBREW_PREFIX/opt/asdf/libexec/asdf.sh"

# Mise-en-place
if [ "$(command -v mise)" ]; then
  _evalcache mise activate zsh
fi

# Direnv
_evalcache direnv hook zsh
export DIRENV_LOG_FORMAT= # make `direnv` silent

# nav
# nav bindkeys

# Starship
if [ "$(command -v starship)" ]; then
  _evalcache starship init zsh --print-full-init
fi

[[ $DEBUG_PERF == true ]] && zprof